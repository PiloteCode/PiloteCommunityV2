import { SlashCommandBuilder } = require('discord.js');
import { EmbedCreator } = require('../../utils/embedCreator.js');

export default {
  data: new SlashCommandBuilder()
    .setName('invest')
    .setDescription('Investissez vos cr√©dits pour tenter de les multiplier')
    .addIntegerOption(option =>
      option.setName('montant')
        .setDescription('Montant √† investir')
        .setRequired(true)
        .setMinValue(100))
    .addStringOption(option =>
      option.setName('risque')
        .setDescription('Niveau de risque de l\'investissement')
        .setRequired(true)
        .addChoices(
          { name: 'Faible (rendement 5-15%, chance 75%)', value: 'low' },
          { name: 'Moyen (rendement 20-50%, chance 50%)', value: 'medium' },
          { name: '√âlev√© (rendement 60-120%, chance 30%)', value: 'high' },
          { name: 'Extr√™me (rendement 150-300%, chance 10%)', value: 'extreme' }
        )),
  
  cooldown: 1800, // 30 minutes
  
  async execute(interaction, client) {
    try {
      await interaction.deferReply();
      
      const amount = interaction.options.getInteger('montant');
      const riskLevel = interaction.options.getString('risque');
      
      // R√©cup√©rer les donn√©es de l'utilisateur
      const user = await client.db.getUser(interaction.user.id);
      
      // V√©rifier si l'utilisateur a assez de cr√©dits
      if (user.balance < amount) {
        const errorEmbed = EmbedCreator.error(
          'Fonds insuffisants',
          `Vous n'avez pas assez de cr√©dits pour investir ${amount}. Solde actuel: ${user.balance} cr√©dits.`
        );
        return interaction.editReply({ embeds: [errorEmbed] });
      }
      
      // D√©finir les param√®tres en fonction du niveau de risque
      const riskParams = {
        low: { minReturn: 5, maxReturn: 15, successRate: 75 },
        medium: { minReturn: 20, maxReturn: 50, successRate: 50 },
        high: { minReturn: 60, maxReturn: 120, successRate: 30 },
        extreme: { minReturn: 150, maxReturn: 300, successRate: 10 }
      };
      
      const params = riskParams[riskLevel];
      
      // D√©terminer si l'investissement est r√©ussi
      const isSuccessful = Math.random() * 100 < params.successRate;
      
      if (isSuccessful) {
        // Calculer le rendement
        const returnRate = (Math.random() * (params.maxReturn - params.minReturn)) + params.minReturn;
        const profit = Math.floor(amount * (returnRate / 100));
        const newBalance = user.balance + profit;
        
        // Mettre √† jour le solde de l'utilisateur
        await client.db.updateUserBalance(interaction.user.id, profit);
        
        // G√©n√©rer un message de r√©ussite al√©atoire
        const successMessages = [
          "Votre investissement a port√© ses fruits!",
          "Le march√© a √©volu√© en votre faveur!",
          "Vos actions ont connu une hausse inattendue!",
          "Votre pari sur les march√©s s'est av√©r√© payant!",
          "Votre analyse √©conomique √©tait correcte!"
        ];
        
        const randomMessage = successMessages[Math.floor(Math.random() * successMessages.length)];
        
        // Cr√©er l'embed de r√©ussite
        const successEmbed = EmbedCreator.success(
          'üìà Investissement r√©ussi!',
          `${randomMessage} Vous avez gagn√© **${profit} cr√©dits** (${returnRate.toFixed(1)}% de rendement).`,
          {
            fields: [
              {
                name: 'üí∞ Investissement initial',
                value: `${amount} cr√©dits`,
                inline: true
              },
              {
                name: 'üíµ Profit',
                value: `+${profit} cr√©dits`,
                inline: true
              },
              {
                name: 'üè¶ Nouveau solde',
                value: `${newBalance} cr√©dits`,
                inline: true
              }
            ]
          }
        );
        
        return interaction.editReply({ embeds: [successEmbed] });
      } else {
        // L'investissement a √©chou√©, l'utilisateur perd son argent
        await client.db.updateUserBalance(interaction.user.id, -amount);
        
        // G√©n√©rer un message d'√©chec al√©atoire
        const failMessages = [
          "Le march√© s'est effondr√© juste apr√®s votre investissement!",
          "Une crise √©conomique soudaine a d√©valu√© vos actions!",
          "Votre entreprise a fait faillite suite √† un scandale!",
          "Une nouvelle r√©glementation a impact√© n√©gativement votre investissement!",
          "Votre conseiller financier √©tait un escroc!"
        ];
        
        const randomMessage = failMessages[Math.floor(Math.random() * failMessages.length)];
        
        // Cr√©er l'embed d'√©chec
        const failEmbed = EmbedCreator.error(
          'üìâ Investissement √©chou√©!',
          `${randomMessage} Vous avez perdu votre investissement de **${amount} cr√©dits**.`,
          {
            fields: [
              {
                name: 'üí∏ Perte',
                value: `-${amount} cr√©dits`,
                inline: true
              },
              {
                name: 'üè¶ Nouveau solde',
                value: `${user.balance - amount} cr√©dits`,
                inline: true
              }
            ]
          }
        );
        
        return interaction.editReply({ embeds: [failEmbed] });
      }
      
    } catch (error) {
      console.error('Error in invest command:', error);
      
      const errorEmbed = EmbedCreator.error(
        'Erreur',
        'Une erreur est survenue lors de l\'ex√©cution de la commande.'
      );
      
      if (interaction.deferred) {
        await interaction.editReply({ embeds: [errorEmbed] });
      } else {
        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }
    }
  }
};