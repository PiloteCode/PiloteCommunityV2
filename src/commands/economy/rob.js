import { SlashCommandBuilder } = require('discord.js');
import { EmbedCreator } = require('../../utils/embedCreator.js');

export default {
  data: new SlashCommandBuilder()
    .setName('rob')
    .setDescription('Tentez de voler des crÃ©dits Ã  un autre utilisateur')
    .addUserOption(option =>
      option.setName('utilisateur')
        .setDescription('L\'utilisateur que vous souhaitez voler')
        .setRequired(true)),
  
  cooldown: 3600, // 1 heure
  
  async execute(interaction, client) {
    try {
      await interaction.deferReply();
      
      const targetUser = interaction.options.getUser('utilisateur');
      
      // VÃ©rifie si l'utilisateur essaie de se voler lui-mÃªme
      if (targetUser.id === interaction.user.id) {
        const errorEmbed = EmbedCreator.error(
          'Erreur',
          'Vous ne pouvez pas vous voler vous-mÃªme!'
        );
        return interaction.editReply({ embeds: [errorEmbed] });
      }
      
      // VÃ©rifie si la cible est un bot
      if (targetUser.bot) {
        const errorEmbed = EmbedCreator.error(
          'Erreur',
          'Vous ne pouvez pas voler un bot!'
        );
        return interaction.editReply({ embeds: [errorEmbed] });
      }
      
      // RÃ©cupÃ¨re les donnÃ©es des deux utilisateurs
      const thief = await client.db.getUser(interaction.user.id);
      const victim = await client.db.getUser(targetUser.id);
      
      // VÃ©rifie si la victime a assez d'argent pour Ãªtre volÃ©e
      const minimumAmount = 100;
      
      if (victim.balance < minimumAmount) {
        const errorEmbed = EmbedCreator.warning(
          'Vol impossible',
          `${targetUser.username} n'a pas assez de crÃ©dits pour Ãªtre volÃ©(e)! (minimum: ${minimumAmount} crÃ©dits)`
        );
        return interaction.editReply({ embeds: [errorEmbed] });
      }
      
      // VÃ©rifie si le voleur a assez d'argent pour tenter le vol (pÃ©nalitÃ© en cas d'Ã©chec)
      const penaltyAmount = 150;
      
      if (thief.balance < penaltyAmount) {
        const errorEmbed = EmbedCreator.warning(
          'Vol impossible',
          `Vous avez besoin d'au moins ${penaltyAmount} crÃ©dits pour tenter un vol (en cas d'Ã©chec, vous perdrez cette somme).`
        );
        return interaction.editReply({ embeds: [errorEmbed] });
      }
      
      // Calcul de la probabilitÃ© de rÃ©ussite (entre 30% et 50%)
      const successRate = 40; // 40% de chance de rÃ©ussir
      const isSuccessful = Math.random() * 100 < successRate;
      
      if (isSuccessful) {
        // Calcul du montant volÃ© (entre 10% et 30% du solde de la victime)
        const stolenPercentage = Math.random() * 20 + 10; // 10% Ã  30%
        const stolenAmount = Math.floor(victim.balance * (stolenPercentage / 100));
        
        // Mise Ã  jour des balances
        await client.db.updateUserBalance(interaction.user.id, stolenAmount);
        await client.db.updateUserBalance(targetUser.id, -stolenAmount);
        
        // Notification du vol rÃ©ussi
        const successEmbed = EmbedCreator.success(
          'ðŸ”« Vol rÃ©ussi!',
          `Vous avez volÃ© **${stolenAmount} crÃ©dits** Ã  ${targetUser.username}!`,
          {
            fields: [
              {
                name: 'ðŸ’° Votre nouveau solde',
                value: `${thief.balance + stolenAmount} crÃ©dits`,
                inline: true
              },
              {
                name: 'ðŸ’¸ Pourcentage volÃ©',
                value: `${stolenPercentage.toFixed(1)}%`,
                inline: true
              }
            ]
          }
        );
        
        return interaction.editReply({ embeds: [successEmbed] });
      } else {
        // Vol Ã©chouÃ©, le voleur perd de l'argent
        await client.db.updateUserBalance(interaction.user.id, -penaltyAmount);
        
        // GÃ©nÃ©ration d'un message d'Ã©chec alÃ©atoire
        const failMessages = [
          "Vous avez trÃ©buchÃ© pendant votre fuite!",
          "Votre victime vous a vu et a appelÃ© la police!",
          "Quelqu'un vous a filmÃ© pendant le vol!",
          "Une camÃ©ra de surveillance vous a repÃ©rÃ©!",
          "Vous avez fait trop de bruit et tout le monde vous a remarquÃ©!"
        ];
        
        const randomMessage = failMessages[Math.floor(Math.random() * failMessages.length)];
        
        const failEmbed = EmbedCreator.error(
          'ðŸ‘® Vol Ã©chouÃ©!',
          `${randomMessage} Vous avez Ã©tÃ© pris et avez dÃ» payer une amende de **${penaltyAmount} crÃ©dits**.`,
          {
            fields: [
              {
                name: 'ðŸ’° Votre nouveau solde',
                value: `${thief.balance - penaltyAmount} crÃ©dits`,
                inline: true
              }
            ]
          }
        );
        
        return interaction.editReply({ embeds: [failEmbed] });
      }
      
    } catch (error) {
      console.error('Error in rob command:', error);
      
      const errorEmbed = EmbedCreator.error(
        'Erreur',
        'Une erreur est survenue lors de l\'exÃ©cution de la commande.'
      );
      
      if (interaction.deferred) {
        await interaction.editReply({ embeds: [errorEmbed] });
      } else {
        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }
    }
  }
};