import { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { EmbedCreator } from '../../utils/embedCreator.js';

export default {
  data: new SlashCommandBuilder()
    .setName('treasure-hunt')
    .setDescription('Partez √† la chasse au tr√©sor pour gagner des PiloCoins')
    .addSubcommand(subcommand =>
      subcommand
        .setName('start')
        .setDescription('D√©marrer une nouvelle chasse au tr√©sor')
        .addStringOption(option =>
          option.setName('difficult√©')
            .setDescription('Niveau de difficult√© de la chasse')
            .setRequired(true)
            .addChoices(
              { name: 'Facile (5x5, 3 tr√©sors)', value: 'easy' },
              { name: 'Moyenne (6x6, 4 tr√©sors)', value: 'medium' },
              { name: 'Difficile (8x8, 5 tr√©sors)', value: 'hard' }
            )))
    .addSubcommand(subcommand =>
      subcommand
        .setName('stats')
        .setDescription('Voir vos statistiques de chasse au tr√©sor')),

  cooldown: 30000, // 30 secondes

  async execute(interaction, client) {
    try {
      await interaction.deferReply();
      
      const userId = interaction.user.id;
      const subcommand = interaction.options.getSubcommand();
      
      // Cr√©er la table si elle n'existe pas
      await createTreasureHuntTable(client);
      
      if (subcommand === 'start') {
        // V√©rifier si l'utilisateur a d√©j√† une partie en cours
        const activeGame = await getActiveGame(client, userId);
        
        if (activeGame) {
          // Trouver le nombre de coups jou√©s
          const movesPlayed = await getMovesCount(client, activeGame.id);
          
          return interaction.editReply({
            embeds: [
              EmbedCreator.warning(
                'üó∫Ô∏è Chasse au tr√©sor en cours',
                `Vous avez d√©j√† une chasse au tr√©sor en cours! Vous avez jou√© ${movesPlayed} coups et trouv√© ${activeGame.treasures_found}/${activeGame.total_treasures} tr√©sors.`,
                {
                  fields: [
                    {
                      name: '‚ùì Comment continuer',
                      value: 'Utilisez les boutons ci-dessous pour continuer votre chasse au tr√©sor actuelle.',
                      inline: false
                    }
                  ]
                }
              )
            ],
            components: [await createGameButtons(client, activeGame.id)]
          });
        }
        
        // R√©cup√©rer les donn√©es utilisateur
        const user = await client.db.getUser(userId);
        
        // R√©cup√©rer la difficult√© choisie
        const difficulty = interaction.options.getString('difficult√©');
        
        // Co√ªt pour commencer une partie
        const entryCost = getEntryCost(difficulty);
        
        // V√©rifier si l'utilisateur a assez de PiloCoins
        if (user.balance < entryCost) {
          return interaction.editReply({
            embeds: [
              EmbedCreator.error(
                'PiloCoins insuffisants',
                `Vous avez besoin de ${entryCost} PiloCoins pour commencer une chasse au tr√©sor en difficult√© ${getDifficultyName(difficulty)}. Vous n'avez que ${user.balance} PiloCoins.`
              )
            ]
          });
        }
        
        // D√©duire le co√ªt d'entr√©e
        await client.db.updateUserBalance(userId, -entryCost);
        
        // Cr√©er une nouvelle partie
        const gameId = await createNewGame(client, userId, difficulty);
        
        // Cr√©er l'embed de d√©marrage
        const embed = EmbedCreator.success(
          'üó∫Ô∏è Chasse au tr√©sor commenc√©e!',
          `Vous partez √† la recherche de tr√©sors! Utilisez les boutons de direction pour explorer la carte. Attention aux pi√®ges!`,
          {
            fields: [
              {
                name: 'üéÆ Commandes',
                value: 'Utilisez les boutons de direction pour vous d√©placer sur la carte. Rencontrez diff√©rents √©v√©nements lors de votre exploration: tr√©sors, pi√®ges, monstres ou indices.',
                inline: false
              },
              {
                name: 'üèÜ Objectif',
                value: `Trouvez tous les ${getGameConfig(difficulty).treasures} tr√©sors cach√©s sur la carte pour remporter un bonus important!`,
                inline: false
              },
              {
                name: 'üí∞ Co√ªt d\'entr√©e',
                value: `${entryCost} PiloCoins`,
                inline: true
              },
              {
                name: 'üéØ Difficult√©',
                value: getDifficultyName(difficulty),
                inline: true
              },
              {
                name: 'üí∞ Nouveau solde',
                value: `${user.balance - entryCost} PiloCoins`,
                inline: true
              }
            ]
          }
        );
        
        // Cr√©er les boutons de jeu
        const gameButtons = await createGameButtons(client, gameId);
        
        return interaction.editReply({
          embeds: [embed],
          components: [gameButtons]
        });
      }
      
      else if (subcommand === 'stats') {
        // R√©cup√©rer les statistiques de l'utilisateur
        const stats = await getTreasureHuntStats(client, userId);
        
        // Cr√©er l'embed de statistiques
        const embed = EmbedCreator.economy(
          'üìä Statistiques de chasse au tr√©sor',
          `Voici vos statistiques pour les chasses au tr√©sor:`,
          {
            fields: [
              {
                name: 'üéÆ Parties jou√©es',
                value: `${stats.total_games}`,
                inline: true
              },
              {
                name: 'üèÜ Parties termin√©es',
                value: `${stats.completed_games}`,
                inline: true
              },
              {
                name: 'üíØ Taux de compl√©tion',
                value: `${stats.total_games > 0 ? Math.round((stats.completed_games / stats.total_games) * 100) : 0}%`,
                inline: true
              },
              {
                name: 'üí∞ PiloCoins gagn√©s',
                value: `${stats.total_earnings}`,
                inline: true
              },
              {
                name: 'üí∏ PiloCoins d√©pens√©s',
                value: `${stats.total_spent}`,
                inline: true
              },
              {
                name: 'üìà Profit net',
                value: `${stats.total_earnings - stats.total_spent}`,
                inline: true
              },
              {
                name: 'üó∫Ô∏è Coups jou√©s',
                value: `${stats.total_moves}`,
                inline: true
              },
              {
                name: 'üèÜ Tr√©sors trouv√©s',
                value: `${stats.treasures_found}`,
                inline: true
              },
              {
                name: 'üíÄ Pi√®ges activ√©s',
                value: `${stats.traps_triggered}`,
                inline: true
              }
            ]
          }
        );
        
        return interaction.editReply({
          embeds: [embed]
        });
      }
      
    } catch (error) {
      console.error('Error in treasure-hunt command:', error);
      return interaction.editReply({
        embeds: [
          EmbedCreator.error(
            'Erreur', 
            'Une erreur est survenue lors de l\'ex√©cution de la commande.'
          )
        ]
      });
    }
  }
};

// Fonction pour cr√©er la table de chasse au tr√©sor
async function createTreasureHuntTable(client) {
  await client.db.db.exec(`
    CREATE TABLE IF NOT EXISTS treasure_hunt_games (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id TEXT NOT NULL,
      difficulty TEXT NOT NULL,
      grid_size INTEGER NOT NULL,
      total_treasures INTEGER NOT NULL,
      treasures_found INTEGER NOT NULL DEFAULT 0,
      player_x INTEGER NOT NULL DEFAULT 0,
      player_y INTEGER NOT NULL DEFAULT 0,
      completed INTEGER NOT NULL DEFAULT 0,
      created_at TEXT NOT NULL DEFAULT (datetime('now')),
      updated_at TEXT NOT NULL DEFAULT (datetime('now')),
      FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
    )
  `);
  
  await client.db.db.exec(`
    CREATE TABLE IF NOT EXISTS treasure_hunt_grid (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      game_id INTEGER NOT NULL,
      x INTEGER NOT NULL,
      y INTEGER NOT NULL,
      content TEXT NOT NULL,
      discovered INTEGER NOT NULL DEFAULT 0,
      FOREIGN KEY (game_id) REFERENCES treasure_hunt_games(id) ON DELETE CASCADE,
      UNIQUE(game_id, x, y)
    )
  `);
  
  await client.db.db.exec(`
    CREATE TABLE IF NOT EXISTS treasure_hunt_moves (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      game_id INTEGER NOT NULL,
      direction TEXT NOT NULL,
      result TEXT NOT NULL,
      created_at TEXT NOT NULL DEFAULT (datetime('now')),
      FOREIGN KEY (game_id) REFERENCES treasure_hunt_games(id) ON DELETE CASCADE
    )
  `);
  
  await client.db.db.exec(`
    CREATE TABLE IF NOT EXISTS treasure_hunt_stats (
      user_id TEXT PRIMARY KEY,
      total_games INTEGER NOT NULL DEFAULT 0,
      completed_games INTEGER NOT NULL DEFAULT 0,
      total_earnings INTEGER NOT NULL DEFAULT 0,
      total_spent INTEGER NOT NULL DEFAULT 0,
      total_moves INTEGER NOT NULL DEFAULT 0,
      treasures_found INTEGER NOT NULL DEFAULT 0,
      traps_triggered INTEGER NOT NULL DEFAULT 0,
      last_played TEXT NOT NULL DEFAULT (datetime('now')),
      FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
    )
  `);
}

// Fonction pour r√©cup√©rer une partie active
async function getActiveGame(client, userId) {
  return await client.db.db.get(`
    SELECT * FROM treasure_hunt_games
    WHERE user_id = ? AND completed = 0
    ORDER BY created_at DESC
    LIMIT 1
  `, userId);
}

// Fonction pour cr√©er une nouvelle partie
async function createNewGame(client, userId, difficulty) {
  // R√©cup√©rer la configuration de la difficult√©
  const config = getGameConfig(difficulty);
  
  // Ins√©rer la nouvelle partie
  const result = await client.db.db.run(`
    INSERT INTO treasure_hunt_games (
      user_id, difficulty, grid_size, total_treasures,
      player_x, player_y
    ) VALUES (?, ?, ?, ?, ?, ?)
  `, userId, difficulty, config.gridSize, config.treasures, 0, 0);
  
  const gameId = result.lastID;
  
  // G√©n√©rer la grille
  await generateGrid(client, gameId, config);
  
  // Mettre √† jour les statistiques de l'utilisateur
  await updateTreasureHuntStats(client, userId, {
    total_games: 1,
    total_spent: getEntryCost(difficulty)
  });
  
  return gameId;
}

// Fonction pour g√©n√©rer la grille de jeu
async function generateGrid(client, gameId, config) {
  const { gridSize, treasures } = config;
  
  // Placer le joueur √† l'origine (0,0)
  await client.db.db.run(`
    INSERT INTO treasure_hunt_grid (game_id, x, y, content, discovered)
    VALUES (?, ?, ?, ?, ?)
  `, gameId, 0, 0, 'empty', 1);
  
  // Placer les tr√©sors al√©atoirement
  for (let i = 0; i < treasures; i++) {
    let x, y;
    let placed = false;
    
    while (!placed) {
      x = Math.floor(Math.random() * gridSize);
      y = Math.floor(Math.random() * gridSize);
      
      // Ne pas placer de tr√©sor √† l'origine
      if (x === 0 && y === 0) continue;
      
      // V√©rifier si la case est d√©j√† occup√©e
      const cell = await client.db.db.get(`
        SELECT * FROM treasure_hunt_grid
        WHERE game_id = ? AND x = ? AND y = ?
      `, gameId, x, y);
      
      if (!cell) {
        // Placer le tr√©sor
        await client.db.db.run(`
          INSERT INTO treasure_hunt_grid (game_id, x, y, content, discovered)
          VALUES (?, ?, ?, ?, ?)
        `, gameId, x, y, 'treasure', 0);
        
        placed = true;
      }
    }
  }
  
  // Placer des pi√®ges al√©atoirement (environ 1/4 de la grille)
  const traps = Math.floor((gridSize * gridSize) / 4);
  
  for (let i = 0; i < traps; i++) {
    let x, y;
    let placed = false;
    
    while (!placed) {
      x = Math.floor(Math.random() * gridSize);
      y = Math.floor(Math.random() * gridSize);
      
      // Ne pas placer de pi√®ge √† l'origine
      if (x === 0 && y === 0) continue;
      
      // V√©rifier si la case est d√©j√† occup√©e
      const cell = await client.db.db.get(`
        SELECT * FROM treasure_hunt_grid
        WHERE game_id = ? AND x = ? AND y = ?
      `, gameId, x, y);
      
      if (!cell) {
        // Placer le pi√®ge
        await client.db.db.run(`
          INSERT INTO treasure_hunt_grid (game_id, x, y, content, discovered)
          VALUES (?, ?, ?, ?, ?)
        `, gameId, x, y, 'trap', 0);
        
        placed = true;
      }
    }
  }
  
  // Placer des indices al√©atoirement (environ 1/8 de la grille)
  const clues = Math.floor((gridSize * gridSize) / 8);
  
  for (let i = 0; i < clues; i++) {
    let x, y;
    let placed = false;
    
    while (!placed) {
      x = Math.floor(Math.random() * gridSize);
      y = Math.floor(Math.random() * gridSize);
      
      // Ne pas placer d'indice √† l'origine
      if (x === 0 && y === 0) continue;
      
      // V√©rifier si la case est d√©j√† occup√©e
      const cell = await client.db.db.get(`
        SELECT * FROM treasure_hunt_grid
        WHERE game_id = ? AND x = ? AND y = ?
      `, gameId, x, y);
      
      if (!cell) {
        // Placer l'indice
        await client.db.db.run(`
          INSERT INTO treasure_hunt_grid (game_id, x, y, content, discovered)
          VALUES (?, ?, ?, ?, ?)
        `, gameId, x, y, 'clue', 0);
        
        placed = true;
      }
    }
  }
  
  // Placer des monstres al√©atoirement (environ 1/6 de la grille)
  const monsters = Math.floor((gridSize * gridSize) / 6);
  
  for (let i = 0; i < monsters; i++) {
    let x, y;
    let placed = false;
    
    while (!placed) {
      x = Math.floor(Math.random() * gridSize);
      y = Math.floor(Math.random() * gridSize);
      
      // Ne pas placer de monstre √† l'origine
      if (x === 0 && y === 0) continue;
      
      // V√©rifier si la case est d√©j√† occup√©e
      const cell = await client.db.db.get(`
        SELECT * FROM treasure_hunt_grid
        WHERE game_id = ? AND x = ? AND y = ?
      `, gameId, x, y);
      
      if (!cell) {
        // Placer le monstre
        await client.db.db.run(`
          INSERT INTO treasure_hunt_grid (game_id, x, y, content, discovered)
          VALUES (?, ?, ?, ?, ?)
        `, gameId, x, y, 'monster', 0);
        
        placed = true;
      }
    }
  }
  
  // Les cases restantes sont vides par d√©faut (on ne les stocke pas pour √©conomiser de l'espace)
}

// Fonction pour r√©cup√©rer le nombre de coups jou√©s
async function getMovesCount(client, gameId) {
  const result = await client.db.db.get(`
    SELECT COUNT(*) as count FROM treasure_hunt_moves
    WHERE game_id = ?
  `, gameId);
  
  return result.count || 0;
}

// Fonction pour cr√©er les boutons de jeu
async function createGameButtons(client, gameId) {
  // R√©cup√©rer les informations sur la partie
  const game = await client.db.db.get(`
    SELECT * FROM treasure_hunt_games
    WHERE id = ?
  `, gameId);
  
  // V√©rifier les limites de la carte pour d√©sactiver certains boutons
  const canMoveNorth = game.player_y > 0;
  const canMoveSouth = game.player_y < game.grid_size - 1;
  const canMoveWest = game.player_x > 0;
  const canMoveEast = game.player_x < game.grid_size - 1;
  
  // Cr√©er les boutons de direction
  const buttons = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId(`treasure_north_${gameId}`)
        .setLabel('‚¨ÜÔ∏è Nord')
        .setStyle(ButtonStyle.Primary)
        .setDisabled(!canMoveNorth),
      new ButtonBuilder()
        .setCustomId(`treasure_south_${gameId}`)
        .setLabel('‚¨áÔ∏è Sud')
        .setStyle(ButtonStyle.Primary)
        .setDisabled(!canMoveSouth),
      new ButtonBuilder()
        .setCustomId(`treasure_west_${gameId}`)
        .setLabel('‚¨ÖÔ∏è Ouest')
        .setStyle(ButtonStyle.Primary)
        .setDisabled(!canMoveWest),
      new ButtonBuilder()
        .setCustomId(`treasure_east_${gameId}`)
        .setLabel('‚û°Ô∏è Est')
        .setStyle(ButtonStyle.Primary)
        .setDisabled(!canMoveEast),
    );
  
  return buttons;
}

// Fonction pour r√©cup√©rer la configuration de jeu en fonction de la difficult√©
function getGameConfig(difficulty) {
  switch (difficulty) {
    case 'easy':
      return { gridSize: 5, treasures: 3 };
    case 'medium':
      return { gridSize: 6, treasures: 4 };
    case 'hard':
      return { gridSize: 8, treasures: 5 };
    default:
      return { gridSize: 5, treasures: 3 };
  }
}

// Fonction pour r√©cup√©rer le co√ªt d'entr√©e en fonction de la difficult√©
function getEntryCost(difficulty) {
  switch (difficulty) {
    case 'easy':
      return 100;
    case 'medium':
      return 200;
    case 'hard':
      return 300;
    default:
      return 100;
  }
}

// Fonction pour r√©cup√©rer le nom de la difficult√©
function getDifficultyName(difficulty) {
  switch (difficulty) {
    case 'easy':
      return 'Facile';
    case 'medium':
      return 'Moyenne';
    case 'hard':
      return 'Difficile';
    default:
      return 'Inconnue';
  }
}

// Fonction pour mettre √† jour les statistiques de chasse au tr√©sor
async function updateTreasureHuntStats(client, userId, updates) {
  // V√©rifier si l'utilisateur a d√©j√† des statistiques
  const stats = await client.db.db.get(`
    SELECT * FROM treasure_hunt_stats
    WHERE user_id = ?
  `, userId);
  
  if (!stats) {
    // Cr√©er une entr√©e pour l'utilisateur
    await client.db.db.run(`
      INSERT INTO treasure_hunt_stats (
        user_id, 
        total_games, 
        completed_games, 
        total_earnings, 
        total_spent, 
        total_moves, 
        treasures_found, 
        traps_triggered
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `, 
      userId, 
      updates.total_games || 0, 
      updates.completed_games || 0, 
      updates.total_earnings || 0, 
      updates.total_spent || 0, 
      updates.total_moves || 0, 
      updates.treasures_found || 0, 
      updates.traps_triggered || 0
    );
    
    return;
  }
  
  // Construire la requ√™te de mise √† jour
  let query = 'UPDATE treasure_hunt_stats SET ';
  const params = [];
  
  // Ajouter les champs √† mettre √† jour
  if (updates.total_games) {
    query += 'total_games = total_games + ?, ';
    params.push(updates.total_games);
  }
  
  if (updates.completed_games) {
    query += 'completed_games = completed_games + ?, ';
    params.push(updates.completed_games);
  }
  
  if (updates.total_earnings) {
    query += 'total_earnings = total_earnings + ?, ';
    params.push(updates.total_earnings);
  }
  
  if (updates.total_spent) {
    query += 'total_spent = total_spent + ?, ';
    params.push(updates.total_spent);
  }
  
  if (updates.total_moves) {
    query += 'total_moves = total_moves + ?, ';
    params.push(updates.total_moves);
  }
  
  if (updates.treasures_found) {
    query += 'treasures_found = treasures_found + ?, ';
    params.push(updates.treasures_found);
  }
  
  if (updates.traps_triggered) {
    query += 'traps_triggered = traps_triggered + ?, ';
    params.push(updates.traps_triggered);
  }
  
  query += 'last_played = datetime(\'now\') WHERE user_id = ?';
  params.push(userId);
  
  // Ex√©cuter la mise √† jour
  await client.db.db.run(query, ...params);
}

// Fonction pour r√©cup√©rer les statistiques de chasse au tr√©sor
async function getTreasureHuntStats(client, userId) {
  // V√©rifier si l'utilisateur a d√©j√† des statistiques
  const stats = await client.db.db.get(`
    SELECT * FROM treasure_hunt_stats
    WHERE user_id = ?
  `, userId);
  
  if (!stats) {
    // Retourner des statistiques vides
    return {
      user_id: userId,
      total_games: 0,
      completed_games: 0,
      total_earnings: 0,
      total_spent: 0,
      total_moves: 0,
      treasures_found: 0,
      traps_triggered: 0,
      last_played: null
    };
  }
  
  return stats;
}